// Mocks generated by Mockito 5.4.2 from annotations
// in arkademi_test/test/mocks/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:arkademi_test/domain/repositories/courses_repository.dart'
    as _i2;
import 'package:arkademi_test/domain/repositories/file_repository.dart' as _i4;
import 'package:arkademi_test/presentation/blocs/courses_status/courses_status_bloc.dart'
    as _i3;
import 'package:arkademi_test/presentation/blocs/courses_video/courses_video_bloc.dart'
    as _i8;
import 'package:arkademi_test/presentation/blocs/curriculum_status/curriculum_status_bloc.dart'
    as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCoursesRepository_0 extends _i1.SmartFake
    implements _i2.CoursesRepository {
  _FakeCoursesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoursesStatusState_1 extends _i1.SmartFake
    implements _i3.CoursesStatusState {
  _FakeCoursesStatusState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileRepository_2 extends _i1.SmartFake
    implements _i4.FileRepository {
  _FakeFileRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCurriculumStatusState_3 extends _i1.SmartFake
    implements _i5.CurriculumStatusState {
  _FakeCurriculumStatusState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoursesStatusBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoursesStatusBloc extends _i1.Mock implements _i3.CoursesStatusBloc {
  MockCoursesStatusBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CoursesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCoursesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CoursesRepository);

  @override
  _i3.CoursesStatusState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCoursesStatusState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.CoursesStatusState);

  @override
  _i6.Stream<_i3.CoursesStatusState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.CoursesStatusState>.empty(),
      ) as _i6.Stream<_i3.CoursesStatusState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i3.CoursesStatusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.CoursesStatusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.CoursesStatusState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.CoursesStatusEvent>(
    _i7.EventHandler<E, _i3.CoursesStatusState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i7.Transition<_i3.CoursesStatusEvent, _i3.CoursesStatusState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i3.CoursesStatusState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoursesVideoBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoursesVideoBloc extends _i1.Mock implements _i8.CoursesVideoBloc {
  MockCoursesVideoBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FileRepository get fileRepository => (super.noSuchMethod(
        Invocation.getter(#fileRepository),
        returnValue: _FakeFileRepository_2(
          this,
          Invocation.getter(#fileRepository),
        ),
      ) as _i4.FileRepository);

  @override
  _i8.CoursesVideoState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.dummyValue<_i8.CoursesVideoState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.CoursesVideoState);

  @override
  _i6.Stream<_i8.CoursesVideoState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i8.CoursesVideoState>.empty(),
      ) as _i6.Stream<_i8.CoursesVideoState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i8.CoursesVideoEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.CoursesVideoEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.CoursesVideoState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.CoursesVideoEvent>(
    _i7.EventHandler<E, _i8.CoursesVideoState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i7.Transition<_i8.CoursesVideoEvent, _i8.CoursesVideoState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i8.CoursesVideoState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CurriculumStatusBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurriculumStatusBloc extends _i1.Mock
    implements _i5.CurriculumStatusBloc {
  MockCurriculumStatusBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CoursesRepository get coursesRepository => (super.noSuchMethod(
        Invocation.getter(#coursesRepository),
        returnValue: _FakeCoursesRepository_0(
          this,
          Invocation.getter(#coursesRepository),
        ),
      ) as _i2.CoursesRepository);

  @override
  _i5.CurriculumStatusState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCurriculumStatusState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.CurriculumStatusState);

  @override
  _i6.Stream<_i5.CurriculumStatusState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i5.CurriculumStatusState>.empty(),
      ) as _i6.Stream<_i5.CurriculumStatusState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i5.CurriculumStatusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i5.CurriculumStatusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.CurriculumStatusState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i5.CurriculumStatusEvent>(
    _i7.EventHandler<E, _i5.CurriculumStatusState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i7.Transition<_i5.CurriculumStatusEvent, _i5.CurriculumStatusState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i5.CurriculumStatusState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
