// Mocks generated by Mockito 5.4.2 from annotations
// in arkademi_test/test/mocks/local_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:arkademi_test/data/local/file_local.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileLocal extends _i1.Mock implements _i2.FileLocal {
  MockFileLocal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<int> get downloadProgress => (super.noSuchMethod(
        Invocation.getter(#downloadProgress),
        returnValue: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);

  @override
  _i3.Future<void> saveFileFromUrl(
    String? url,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFileFromUrl,
          [
            url,
            fileName,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteFile(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [fileName],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isFileExist(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #isFileExist,
          [fileName],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<String> getFilePath(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #getFilePath,
          [fileName],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}
